(* ========================================================================= *)
(*  More definitions and theorems and tactics about lists.                   *)
(*                                                                           *)
(*  Author: Marco Maggesi                                                    *)
(*          University of Florence, Italy                                    *)
(*          http://www.math.unifi.it/~maggesi/                               *)
(*                                                                           *)
(*          (c) Copyright, Marco Maggesi 2005 2006 2017, 2020                *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(*  Proof that dblambda and LC are operads.                                  *)
(* ------------------------------------------------------------------------- *)

let DBLAMBDA_SUBSTOID = prove
 (`SUBSTOID SUBST`,
  REWRITE_TAC[SUBSTOID_DEF; SUBST_SUBST; o_DEF] THEN
  EXISTS_TAC `REF` THEN REWRITE_TAC[SUBST; SUBST_REF]);;

let DBLAMBDA_SBUNIT = prove
 (`SBUNIT SUBST = REF`,
  MATCH_MP_TAC SBUNIT_UNIQUE THEN
  REWRITE_TAC[DBLAMBDA_SUBSTOID; SUBST; SUBST_REF]);;

let LC_SUBSTOID = prove
 (`SUBSTOID LC_SUBST`,
  REWRITE_TAC[SUBSTOID_DEF; LC_SUBST_SUBST; o_DEF] THEN
  EXISTS_TAC `LC_REF` THEN
  REWRITE_TAC[LC_SUBST_RUNIT; LC_SUBST_LUNIT]);;

let LC_SBUNIT = prove
 (`SBUNIT LC_SUBST = LC_REF`,
  MATCH_MP_TAC SBUNIT_UNIQUE THEN
  REWRITE_TAC[LC_SUBSTOID; LC_SUBST_LUNIT; LC_SUBST_RUNIT]);;

(* ------------------------------------------------------------------------- *)
(*  Proof that LC is an exponential operad.                                  *)
(* ------------------------------------------------------------------------- *)

let LC_DMOP = prove
 (`!f x. DMOP LC_SUBST LC_SUBST (LC_PROJ o f) (LC_PROJ x) =
         LC_PROJ (DMOP SUBST SUBST f x)`,
  REPEAT GEN_TAC THEN REWRITE_TAC[DMOP; GSYM LC_SUBST_PROJ] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM; o_THM] THEN
  NUM_CASES_TAC THEN
  REWRITE_TAC[SBDERIV; DBLAMBDA_SBUNIT; LC_SBUNIT; LC_REF; o_THM] THEN
  REWRITE_TAC[SBREINDEX; GSYM LC_SUBST_PROJ] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN
  REWRITE_TAC[FUN_EQ_THM; o_THM; DBLAMBDA_SBUNIT; LC_SBUNIT; LC_REF]);;

let LC_REINDEX_EQ_LC_SUBST = prove
 (`!f x. LC_REINDEX f x = LC_SUBST (LC_REF o f) x`,
  REWRITE_TAC[FORALL_LC_THM; FORALL_LC_FUN_THM] THEN REPEAT GEN_TAC THEN
  REWRITE_TAC[LC_REINDEX; REINDEX_EQ_SUBST; GSYM LC_SUBST_PROJ] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM; o_THM; LC_REF]);;

let LC_ABS_SBMODULE_MOR = prove
 (`SBMODULE_MOR LC_SUBST (DMOP LC_SUBST LC_SUBST) LC_SUBST LC_ABS`,
  REWRITE_TAC[SBMODULE_MOR; SELF_SBMODULE; LC_SUBSTOID] THEN
  SIMP_TAC[SBMODULE_DMOP; LC_SUBSTOID; SELF_SBMODULE] THEN
  REWRITE_TAC[FORALL_LC_THM; FORALL_LC_FUN_THM] THEN REPEAT GEN_TAC THEN
  REWRITE_TAC[LC_SUBST] THEN AP_TERM_TAC THEN REWRITE_TAC[DMOP] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM] THEN
  NUM_CASES_TAC THEN REWRITE_TAC[SBDERIV; LC_DERIV; LC_SBUNIT; SBREINDEX] THEN
  REWRITE_TAC[o_THM; LC_REINDEX_EQ_LC_SUBST]);;

let LC_APP0_SBMODULE_MOR = prove
 (`SBMODULE_ISOM LC_SUBST LC_SUBST (DMOP LC_SUBST LC_SUBST)
                 LC_APP0 LC_ABS`,
  MESON_TAC[SBMODULE_ISOM_SYM; LC_APP0_ABS; LC_ABS_APP0;
            SBMODULE_ISOM; LC_ABS_SBMODULE_MOR]);;

let LC_EXP = prove
 (`EXP_SUBSTOID LC_SUBST LC_APP0 LC_ABS`,
  REWRITE_TAC[EXP_SUBSTOID; LC_APP0_SBMODULE_MOR]);;

(* ------------------------------------------------------------------------- *)
(*  Proof of the universal property of LC                                    *)
(* ------------------------------------------------------------------------- *)

let EXP_SUBSTOID_UNFOLD = prove
 (`!op h:A->A g.
     EXP_SUBSTOID op h g <=>
     SUBSTOID op /\
     (!x. g (h x) = x) /\
     (!y. h (g y) = y) /\
     (!f x. h (op f x) = op (SBDERIV op f) (h x)) /\
     (!f x. op f (g x) = g (op (SBDERIV op f) x))`,
  REPEAT GEN_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID; SELF_SBMODULE; SBMODULE_ISOM_UNFOLD;
              SBMODULE_MOR; DMOP] THEN
  EQ_TAC THEN STRIP_TAC THEN ASM_REWRITE_TAC[] THEN
  ASM_SIMP_TAC[SBMODULE_DMOP; SELF_SBMODULE]);;

let DBLAMBDA_EXPMAP = new_recursive_definition dblambda_RECURSION
  `(!op h g:A->A i. DBLAMBDA_EXPMAP op h g (REF i) = SBUNIT op i) /\
   (!op h g x y.
      DBLAMBDA_EXPMAP op h g (APP x y) =
        op (PUSHENV (DBLAMBDA_EXPMAP op h g y) (SBUNIT op))
           (h (DBLAMBDA_EXPMAP op h g x))) /\
   (!op h g x. DBLAMBDA_EXPMAP op h g (ABS x) =
               g (DBLAMBDA_EXPMAP op h g x))`;;

let DBLAMBDA_EXPMAP_REINDEX = prove
 (`!op h:A->A g x f.
     EXP_SUBSTOID op h g
     ==> DBLAMBDA_EXPMAP op h g (REINDEX f x) =
         op (SBUNIT op o f) (DBLAMBDA_EXPMAP op h g x)`,
  REWRITE_TAC[RIGHT_FORALL_IMP_THM] THEN REPEAT GEN_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID_UNFOLD] THEN STRIP_TAC THEN DBLAMBDA_INDUCT_TAC THEN
  GEN_TAC THEN ASM_REWRITE_TAC[REINDEX; DBLAMBDA_EXPMAP] THENL
  [ASM_SIMP_TAC[SUBSTOID_RUNIT; o_THM];
   ASM_SIMP_TAC[SUBSTOID_ASSOC] THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM] THEN NUM_CASES_TAC THEN
   ASM_SIMP_TAC[SBDERIV; PUSHENV; o_THM; SUBSTOID_RUNIT; SBREINDEX_SBUNIT];
   AP_TERM_TAC THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
   REWRITE_TAC[SBDERIV; SLIDE; o_THM] THEN ASM_SIMP_TAC[SBREINDEX_SBUNIT]]);;

let SBREINDEX_DBLAMBDA_EXPMAP = prove
 (`!op h g x f.
     EXP_SUBSTOID op h g
     ==> SBREINDEX op f (DBLAMBDA_EXPMAP op h g x) =
         DBLAMBDA_EXPMAP op h g (REINDEX f x):A`,
  REWRITE_TAC[RIGHT_FORALL_IMP_THM] THEN REPEAT GEN_TAC THEN
  INTRO_TAC "exp" THEN FIRST_ASSUM MP_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID_UNFOLD] THEN STRIP_TAC THEN DBLAMBDA_INDUCT_TAC THEN
  GEN_TAC THEN ASM_REWRITE_TAC[DBLAMBDA_EXPMAP; REINDEX] THENL
  [ASM_SIMP_TAC[SBREINDEX_SBUNIT];
   ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SUBSTOID_ASSOC;
                SBREINDEX_DBSUBST] THEN
   AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM; o_THM] THEN
   NUM_CASES_TAC THEN
   ASM_SIMP_TAC[PUSHENV; SBDERIV; SUBSTOID_RUNIT; DBLAMBDA_EXPMAP_REINDEX;
                SBREINDEX_SBUNIT; o_THM];
   ASM_SIMP_TAC[SBREINDEX; DBLAMBDA_EXPMAP_REINDEX] THEN
   AP_TERM_TAC THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
   REWRITE_TAC[SBDERIV; SLIDE; o_THM] THEN ASM_SIMP_TAC[SBREINDEX_SBUNIT]]);;

let DBLAMBDA_EXPMAP_SUBST = prove
 (`!op h:A->A g x f.
     EXP_SUBSTOID op h g
     ==> DBLAMBDA_EXPMAP op h g (SUBST f x) =
         op (DBLAMBDA_EXPMAP op h g o f) (DBLAMBDA_EXPMAP op h g x)`,
  REWRITE_TAC[RIGHT_FORALL_IMP_THM] THEN REPEAT GEN_TAC THEN
  INTRO_TAC "exp" THEN FIRST_ASSUM MP_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID_UNFOLD] THEN STRIP_TAC THEN DBLAMBDA_INDUCT_TAC THEN
  GEN_TAC THEN ASM_REWRITE_TAC[SUBST; DBLAMBDA_EXPMAP] THENL
  [ASM_SIMP_TAC[SUBSTOID_RUNIT; o_THM];
   ASM_SIMP_TAC[SUBSTOID_ASSOC] THEN
   AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
   ASM_SIMP_TAC[SUBSTOID_RUNIT; SBDERIV; PUSHENV] THEN
   ASM_SIMP_TAC[DBSUBST_SBREINDEX; o_THM] THEN
   MATCH_MP_TAC SUBSTOID_LUNIT_IMP THEN
   ASM_REWRITE_TAC[o_THM; PUSHENV];
   AP_TERM_TAC THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
   REWRITE_TAC[DERIV; SBDERIV; DBLAMBDA_EXPMAP; o_THM] THEN
   ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SBREINDEX_DBLAMBDA_EXPMAP]]);;

let DBLAMBDA_EXPMAP_REL = prove
 (`!op h:A->A g x y.
     EXP_SUBSTOID op h g /\ x === y
     ==> DBLAMBDA_EXPMAP op h g x = DBLAMBDA_EXPMAP op h g y`,
  INTRO_TAC "!op h g" THEN REWRITE_TAC[IMP_CONJ; RIGHT_FORALL_IMP_THM] THEN
  INTRO_TAC "exp" THEN FIRST_ASSUM MP_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID_UNFOLD] THEN STRIP_TAC THEN
  MATCH_MP_TAC LC_REL_INDUCT THEN CONJ_TAC THENL
  [MATCH_MP_TAC DBLAMBDA_BETA_INDUCT THEN GEN_TAC THEN GEN_TAC THEN
   REWRITE_TAC[DBLAMBDA_EXPMAP] THEN ASM_SIMP_TAC[DBLAMBDA_EXPMAP_SUBST] THEN
   AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM; o_THM] THEN
   NUM_CASES_TAC THEN REWRITE_TAC[PUSHENV; DBLAMBDA_EXPMAP];
   ALL_TAC] THEN
  CONJ_TAC THENL
  [MATCH_MP_TAC DBLAMBDA_ETA_INDUCT THEN GEN_TAC THEN
   REWRITE_TAC[DBLAMBDA_EXPMAP] THEN
   ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SUBSTOID_ASSOC] THEN
   ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SUBSTOID_ASSOC] THEN
   SUBGOAL_THEN
     `(op (PUSHENV (SBUNIT op 0) (SBUNIT op)) o SBDERIV op (SBUNIT op o SUC)) =
      SBUNIT (op:(num->A)->A->A)`
     SUBST1_TAC THENL
   [REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
    ASM_SIMP_TAC[SBDERIV; SUBSTOID_RUNIT; PUSHENV] THEN
    ASM_SIMP_TAC[DBSUBST_SBREINDEX; o_THM; SUBSTOID_RUNIT; PUSHENV];
    ASM_SIMP_TAC[SUBSTOID_LUNIT]];
   ALL_TAC] THEN
  REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[DBLAMBDA_EXPMAP]);;

let LC_EXPMAP = define
  `!op h g:A->A x. LC_EXPMAP op h g x = DBLAMBDA_EXPMAP op h g (LC_LIFT x)`;;

let LC_EXPMAP_FACTOR = prove
 (`!op h:A->A g x.
     EXP_SUBSTOID op h g
     ==> LC_EXPMAP op h g (LC_PROJ x) = DBLAMBDA_EXPMAP op h g x`,
  REPEAT GEN_TAC THEN DISCH_TAC THEN REWRITE_TAC[LC_EXPMAP] THEN
  MATCH_MP_TAC DBLAMBDA_EXPMAP_REL THEN ASM_REWRITE_TAC[LC_LIFT_PROJ]);;

g `!op h:A->A g.
      EXP_SUBSTOID op h g
      ==> SUBSTOID_MOR LC_SUBST op (LC_EXPMAP op h g)`;;
e (REPEAT STRIP_TAC);;
e (FIRST_ASSUM (STRIP_ASSUME_TAC o REWRITE_RULE [EXP_SUBSTOID_UNFOLD]));;
e (ASM_REWRITE_TAC[SUBSTOID_MOR; LC_SUBSTOID]);;
e (REWRITE_TAC[LC_SBUNIT; LC_REF]);;
e (ASM_SIMP_TAC[LC_EXPMAP_FACTOR; DBLAMBDA_EXPMAP]);;
e (REWRITE_TAC[LC_SUBST_DEF]);;
e (ASM_SIMP_TAC[LC_EXPMAP_FACTOR]);;
e (ASM_SIMP_TAC[DBLAMBDA_EXPMAP_SUBST]);;
e (REWRITE_TAC[LC_EXPMAP; o_DEF]);;
let SUBSTOID_MOR_LC_EXPMAP = top_thm ();;

g `!op h:A->A g.
     EXP_SUBSTOID op h g
     ==>
     (!i. DBLAMBDA_EXPMAP op h g (REF i) = SBUNIT op i) /\
     (!x. DBLAMBDA_EXPMAP op h g (APP0 x) = h (DBLAMBDA_EXPMAP op h g x)) /\
     (!x. DBLAMBDA_EXPMAP op h g (ABS x) = g (DBLAMBDA_EXPMAP op h g x)) /\
     (!t x. DBLAMBDA_EXPMAP op h g (SUBST t x) =
            op (DBLAMBDA_EXPMAP op h g o t) (DBLAMBDA_EXPMAP op h g x))`;;
e (REPEAT GEN_TAC THEN DISCH_TAC);;
e (FIRST_ASSUM (STRIP_ASSUME_TAC o REWRITE_RULE [EXP_SUBSTOID_UNFOLD]));;
e (ASM_REWRITE_TAC[APP0; DBLAMBDA_EXPMAP]);;
e (REPEAT STRIP_TAC);;
e (ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SUBSTOID_ASSOC]);;
e (MATCH_MP_TAC SUBSTOID_LUNIT_IMP);;
e (ASM_REWRITE_TAC[]);;
e (NUM_CASES_TAC THEN REWRITE_TAC[SBDERIV; o_THM] THEN
   ASM_SIMP_TAC[SUBSTOID_RUNIT; SBREINDEX_SBUNIT; PUSHENV]);;
e (ASM_SIMP_TAC[DBLAMBDA_EXPMAP_SUBST]);;
let DBLAMBDA_EXPMAP_ALT = top_thm ();;

g `!op h:A->A g.
      EXP_SUBSTOID op h g
      ==> EXP_SUBSTOID_MOR LC_SUBST LC_APP0 LC_ABS
                          op h g (LC_EXPMAP op h g)`;;
e (REPEAT STRIP_TAC);;
e (FIRST_ASSUM (STRIP_ASSUME_TAC o REWRITE_RULE [EXP_SUBSTOID_UNFOLD]));;
e (ASM_REWRITE_TAC[EXP_SUBSTOID_MOR; LC_EXP]);;
e (ASM_SIMP_TAC[SUBSTOID_MOR_LC_EXPMAP]);;
e (REWRITE_TAC[FORALL_LC_THM]);;
e (ASM_SIMP_TAC[LC_EXPMAP_FACTOR; LC_APP0]);;
e (ASM_SIMP_TAC[DBLAMBDA_EXPMAP_ALT]);;
let EXP_SUBSTOID_MOR_LC_EXPMAP = top_thm ();;

g `!op1 h1 g1 op2 h2 g2 f:A->B.
      EXP_SUBSTOID_MOR op1 h1 g1 op2 h2 g2 f
      <=> EXP_SUBSTOID op1 h1 g1 /\
          EXP_SUBSTOID op2 h2 g2 /\
          SUBSTOID_MOR op1 op2 f /\
          (!x. h2 (f x) = f (h1 x)) /\
          (!x. g2 (f x) = f (g1 x))`;;
e (REPEAT GEN_TAC THEN REWRITE_TAC[EXP_SUBSTOID_MOR] THEN
   EQ_TAC THENL [ALL_TAC; MESON_TAC[]]);;
e (DISCH_THEN (fun th -> REWRITE_TAC[th] THEN MP_TAC th));;
e (REWRITE_TAC[EXP_SUBSTOID; SBMODULE_ISOM_UNFOLD; SBMODULE_MOR]);;
e (REWRITE_TAC[CONJ_ACI]);;
e (STRIP_TAC THEN GEN_TAC);;
e (SUBGOAL_THEN `!x y : B. h2 x :B = h2 y ==> x = y` MATCH_MP_TAC);;
e (ASM_MESON_TAC[]);;
e (ASM_REWRITE_TAC[]);;
let EXP_SUBSTOID_MOR_FACTS = top_thm ();;

g `!op h:A->A g m.
      EXP_SUBSTOID op h g /\
      EXP_SUBSTOID_MOR LC_SUBST LC_APP0 LC_ABS op h g m
      ==> m = LC_EXPMAP op h g`;;
e (REPEAT STRIP_TAC);;
e (STRIP_ASSUME_TAC
    (REWRITE_RULE [EXP_SUBSTOID_UNFOLD]
                  (ASSUME `EXP_SUBSTOID op (h:A->A) g`)));;
e (STRIP_ASSUME_TAC
     (REWRITE_RULE [EXP_SUBSTOID_MOR_FACTS; LC_EXP]
                   (ASSUME `EXP_SUBSTOID_MOR LC_SUBST LC_APP0 LC_ABS
                                           op (h:A->A) g m`)));;
e (STRIP_ASSUME_TAC
    (REWRITE_RULE [SUBSTOID_MOR; LC_SUBSTOID]
                  (ASSUME `SUBSTOID_MOR LC_SUBST op (m:lc->A)`)));;
e (REWRITE_TAC[FUN_EQ_THM]);;
e (REWRITE_TAC[FORALL_LC_THM]);;
e (ASM_SIMP_TAC[LC_EXPMAP_FACTOR]);;
e (DBLAMBDA_INDUCT_TAC);;
e (ASM_REWRITE_TAC[GSYM LC_REF; GSYM LC_SBUNIT; DBLAMBDA_EXPMAP]);;
e (ASM_REWRITE_TAC[GSYM LC_APP; LC_APP_APP0; DBLAMBDA_EXPMAP]);;
e (SUBGOAL_THEN `m (LC_APP0 (LC_PROJ a0)) :A = h (DBLAMBDA_EXPMAP op h g a0)`
    SUBST1_TAC);;
e (ASM_MESON_TAC[]);;
e (AP_THM_TAC THEN AP_TERM_TAC);;
e (REWRITE_TAC[FUN_EQ_THM; o_THM]);;
e (NUM_CASES_TAC THEN ASM_REWRITE_TAC[PUSHENV; NOT_SUC; PRE]);;
e (ASM_REWRITE_TAC[GSYM LC_SBUNIT]);;
e (ASM_REWRITE_TAC[GSYM LC_ABS; DBLAMBDA_EXPMAP]);;
e (ASM_MESON_TAC[]);;
let LC_EXPMAP_UNIQUE = top_thm ();;
