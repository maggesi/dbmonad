(* ========================================================================= *)
(*  More definitions and theorems and tactics about lists.                   *)
(*                                                                           *)
(*  Author: Marco Maggesi                                                    *)
(*          University of Florence, Italy                                    *)
(*          http://www.math.unifi.it/~maggesi/                               *)
(*                                                                           *)
(*          (c) Copyright, Marco Maggesi 2005 2006 2017, 2020                *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* De Bruijn Monads of the syntactic lambda calculus.                        *)
(* ------------------------------------------------------------------------- *)

let DBLAMBDA_SUBSTOID = prove
 (`SUBSTOID SUBST`,
  REWRITE_TAC[SUBSTOID_DEF; SUBST_SUBST; o_DEF] THEN
  EXISTS_TAC `REF` THEN REWRITE_TAC[SUBST; SUBST_REF]);;

let DBLAMBDA_UNIT = prove
 (`UNIT SUBST = REF`,
  MATCH_MP_TAC UNIT_UNIQUE THEN
  REWRITE_TAC[DBLAMBDA_SUBSTOID; SUBST; SUBST_REF]);;

(* ------------------------------------------------------------------------- *)
(* De Bruijn Monads of the semantic lambda calculus.                         *)
(* ------------------------------------------------------------------------- *)

let LC_SUBSTOID = prove
 (`SUBSTOID LC_SUBST`,
  REWRITE_TAC[SUBSTOID_DEF; LC_SUBST_SUBST; o_DEF] THEN
  EXISTS_TAC `LC_REF` THEN
  REWRITE_TAC[LC_SUBST_RUNIT; LC_SUBST_LUNIT]);;

let LC_UNIT = prove
 (`UNIT LC_SUBST = LC_REF`,
  MATCH_MP_TAC UNIT_UNIQUE THEN
  REWRITE_TAC[LC_SUBSTOID; LC_SUBST_LUNIT; LC_SUBST_RUNIT]);;

(* ------------------------------------------------------------------------- *)
(* Universal property of the syntactic lambda calculus.                      *)
(* ------------------------------------------------------------------------- *)

let MODPROD = new_definition
  `MODPROD (mop1:(num->A)->B->B) (mop2:(num->A)->C->C)
           (f:num->A) (x:B,y:C) : B#C = mop1 f x,mop2 f y`;;

let SBMODULE_MODPROD = prove
 (`!op mod1:(num->A)->B->B mod2:(num->A)->C->C.
     mod1 IN SBMODULE op /\ mod2 IN SBMODULE op
     ==> MODPROD mod1 mod2 IN SBMODULE op`,
  REPEAT GEN_TAC THEN REWRITE_TAC[IN_SBMODULE] THEN STRIP_TAC THEN
  ASM_REWRITE_TAC[FORALL_PAIR_THM; MODPROD]);;

let MODREINDEX_MODPROD = prove
 (`!op:(num->A)->A->A f x:B y:C.
     MODREINDEX (op,MODPROD mop1 mop2) f (x,y) =
     MODREINDEX (op,mop1) f x, MODREINDEX (op,mop2) f y`,
  REWRITE_TAC[MODREINDEX; MODPROD]);;

let DBLAMBDA_MODEL = new_definition
  `DBLAMBDA_MODEL =
   {(op:(num->A)->A->A,app:A#A->A,lam:A->A) |
      SUBSTOID op /\
      app IN SBMODULE_MOR op (MODPROD op op, op) /\
      lam IN SBMODULE_MOR op (DMOP op op, op)}`;;

let IN_DBLAMBDA_MODEL = prove
 (`!op:(num->A)->A->A app:A#A->A lam:A->A.
   (op,app,lam) IN DBLAMBDA_MODEL <=>
   SUBSTOID op /\
   app IN SBMODULE_MOR op (MODPROD op op, op) /\
   lam IN SBMODULE_MOR op (DMOP op op, op)`,
  REWRITE_TAC[DBLAMBDA_MODEL; IN_ELIM_THM; PAIR_EQ] THEN MESON_TAC[]);;

let DBLAMBDA_SBMODULE = prove
 (`SUBST IN SBMODULE SUBST`,
  REWRITE_TAC[SELF_SBMODULE; DBLAMBDA_SUBSTOID]);;

let SBREINDEX_SUBST = prove
 (`SBREINDEX SUBST = REINDEX`,
  REWRITE_TAC[FUN_EQ_THM; SBREINDEX; REINDEX_EQ_SUBST; DBLAMBDA_UNIT]);;

let APP_IN_SBMODULE_MOR = prove
 (`UNCURRY APP IN SBMODULE_MOR SUBST (MODPROD SUBST SUBST,SUBST)`,
  REWRITE_TAC[IN_SBMODULE_MOR; DBLAMBDA_SBMODULE] THEN CONJ_TAC THENL
  [MATCH_MP_TAC SBMODULE_MODPROD THEN REWRITE_TAC[DBLAMBDA_SBMODULE];
   REWRITE_TAC[FORALL_PAIR_THM; UNCURRY_DEF; MODPROD; SUBST]]);;

let ABS_IN_SBMODULE_MOR = prove
 (`ABS IN SBMODULE_MOR SUBST (DMOP SUBST SUBST,SUBST)`,
  REWRITE_TAC[IN_SBMODULE_MOR; DBLAMBDA_SBMODULE] THEN CONJ_TAC THENL
  [MATCH_MP_TAC SBMODULE_DMOP THEN REWRITE_TAC[DBLAMBDA_SBMODULE];
   ALL_TAC] THEN
  REPEAT GEN_TAC THEN REWRITE_TAC[SUBST; DMOP; injectivity "dblambda"] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM] THEN INDUCT_TAC THEN
  REWRITE_TAC[DERIV; SBDERIV; DBLAMBDA_UNIT; SBREINDEX_SUBST]);;

let DBLAMBDA_IN_DBLAMBDA_MODEL = prove
 (`SUBST,UNCURRY APP,ABS IN DBLAMBDA_MODEL`,
  REWRITE_TAC[IN_DBLAMBDA_MODEL; DBLAMBDA_SUBSTOID;
              APP_IN_SBMODULE_MOR; ABS_IN_SBMODULE_MOR]);;

let DBLAMBDA_MODEL_MOR = new_definition
  `DBLAMBDA_MODEL_MOR ((op,app,lam),(op',app',lam')) =
   {h:A->B | (op, app, lam)  IN DBLAMBDA_MODEL /\
             (op',app',lam') IN DBLAMBDA_MODEL /\
             h IN SUBSTOID_MOR (op,op') /\
             (!x y. h (app (x,y)) = app' (h x,h y)) /\
             (!x. h (lam x) = lam' (h x))}`;;

let IN_DBLAMBDA_MODEL_MOR = prove
 (`!op :(num->A)->A->A app :A#A->A lam :A->A
    op':(num->B)->B->B app':B#B->B lam':B->B
    h:A->B.
     h IN DBLAMBDA_MODEL_MOR ((op,app,lam),(op',app',lam')) <=>
     (op, app, lam)  IN DBLAMBDA_MODEL /\
     (op',app',lam') IN DBLAMBDA_MODEL /\
     h IN SUBSTOID_MOR (op,op') /\
     (!x y. h (app (x,y)) = app' (h x,h y)) /\
     (!x. h (lam x) = lam' (h x))`,
  REWRITE_TAC[DBLAMBDA_MODEL_MOR; IN_ELIM_THM]);;

let DBLAMBDAINIT_DEF = new_recursive_definition dblambda_RECURSION
  `(!i. DBLAMBDAINIT m (REF i) = UNIT (FST m) i:A) /\
   (!x y. DBLAMBDAINIT m (APP x y) =
          FST (SND m) (DBLAMBDAINIT m x, DBLAMBDAINIT m y)) /\
   (!x. DBLAMBDAINIT m (ABS x) = SND (SND m) (DBLAMBDAINIT m x))`;;

let DBLAMBDAINIT = prove
 (`(!i. DBLAMBDAINIT (op,app,lam) (REF i) = UNIT op i:A) /\
   (!x y. DBLAMBDAINIT (op,app,lam) (APP x y) =
          app(DBLAMBDAINIT (op,app,lam) x, DBLAMBDAINIT (op,app,lam) y):A) /\
   (!x. DBLAMBDAINIT (op,app,lam) (ABS x) =
        lam(DBLAMBDAINIT (op,app,lam) x):A)`,
   REWRITE_TAC[DBLAMBDAINIT_DEF]);;

let DBLAMBDAINIT_REINDEX = prove
 (`!op:(num->A)->A->A app lam x f.
     (op,app,lam) IN DBLAMBDA_MODEL
     ==> DBLAMBDAINIT (op,app,lam) (REINDEX f x) =
         SBREINDEX op f (DBLAMBDAINIT (op,app,lam) x)`,
  REWRITE_TAC[RIGHT_FORALL_IMP_THM; IN_DBLAMBDA_MODEL] THEN
  INTRO_TAC "!op app lam; op app lam" THEN DBLAMBDA_INDUCT_TAC THEN GEN_TAC THEN
  REWRITE_TAC[REINDEX; DBLAMBDAINIT] THENL
  [ASM_SIMP_TAC[SBREINDEX_UNIT];
   HYP_TAC "app: +" (MATCH_MP SBMODULE_MOR_MODREINDEX) THEN
   ASM_REWRITE_TAC[FORALL_PAIR_THM; MODPROD; GSYM SELF_SBREINDEX] THEN
   DISCH_THEN (fun th -> REWRITE_TAC[GSYM th]) THEN
   REWRITE_TAC[MODREINDEX_MODPROD; SELF_SBREINDEX];
   HYP_TAC "lam: +" (MATCH_MP SBMODULE_MOR_MODREINDEX) THEN
   ASM_REWRITE_TAC[GSYM SELF_SBREINDEX] THEN
   DISCH_THEN (fun th -> REWRITE_TAC[GSYM th]) THEN
   AP_TERM_TAC THEN AP_THM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; SBREINDEX; MODREINDEX; DMOP] THEN
   GEN_TAC THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN
   INDUCT_TAC THEN REWRITE_TAC[SLIDE; SBDERIV; o_THM] THEN
   ASM_SIMP_TAC[SBREINDEX_UNIT]]);;

let DBLAMBDAINIT_SUBST = prove
 (`!op:(num->A)->A->A app lam x f.
     (op,app,lam) IN DBLAMBDA_MODEL
     ==> DBLAMBDAINIT (op,app,lam) (SUBST f x) =
         op (DBLAMBDAINIT (op,app,lam) o f) (DBLAMBDAINIT (op,app,lam) x)`,
  REWRITE_TAC[RIGHT_FORALL_IMP_THM] THEN INTRO_TAC "!op app lam; model" THEN
  HYP_TAC "model -> op app lam" (REWRITE_RULE[IN_DBLAMBDA_MODEL]) THEN
  DBLAMBDA_INDUCT_TAC THEN GEN_TAC THEN REWRITE_TAC[SUBST; DBLAMBDAINIT] THENL
  [ASM_SIMP_TAC[SUBSTOID_RUNIT; o_THM];
   HYP_TAC "app -> _ _ +" (REWRITE_RULE[IN_SBMODULE_MOR]) THEN
   ASM_REWRITE_TAC[FORALL_PAIR_THM; MODPROD] THEN
   DISCH_THEN (fun th -> REWRITE_TAC[GSYM th]);
   HYP_TAC "lam -> _ _ +" (REWRITE_RULE[IN_SBMODULE_MOR]) THEN
   DISCH_THEN (fun th -> REWRITE_TAC[GSYM th]) THEN AP_TERM_TAC THEN
   ASM_REWRITE_TAC[DMOP] THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN INDUCT_TAC THEN
   REWRITE_TAC[SBDERIV; DERIV; DBLAMBDAINIT; o_THM] THEN
   ASM_SIMP_TAC[DBLAMBDAINIT_REINDEX]]);;

let DBLAMBDAINIT_IN_SUBSTOID_MOR = prove
 (`!op:(num->A)->A->A app lam.
     (op,app,lam) IN DBLAMBDA_MODEL
     ==> DBLAMBDAINIT (op,app,lam) IN SUBSTOID_MOR (SUBST,op)`,
  REPEAT GEN_TAC THEN INTRO_TAC "model" THEN
  HYP_TAC "model -> op app lam" (REWRITE_RULE[IN_DBLAMBDA_MODEL]) THEN
  ASM_REWRITE_TAC[IN_SUBSTOID_MOR; DBLAMBDA_SUBSTOID] THEN
  REWRITE_TAC[DBLAMBDAINIT; DBLAMBDA_UNIT] THEN
  ASM_SIMP_TAC[DBLAMBDAINIT_SUBST]);;

(* ------------------------------------------------------------------------- *)
(*  Universal property of the syntactic lambda calculus.                     *)
(* ------------------------------------------------------------------------- *)

let DBLAMBDAINIT_IN_DBLAMBDA_MODEL_MOR = prove
 (`!op:(num->A)->A->A app lam.
     (op,app,lam) IN DBLAMBDA_MODEL
     ==> DBLAMBDAINIT (op,app,lam) IN
         DBLAMBDA_MODEL_MOR ((SUBST,UNCURRY APP,ABS),(op,app,lam))`,
  REPEAT GEN_TAC THEN INTRO_TAC "model" THEN
  ASM_REWRITE_TAC[IN_DBLAMBDA_MODEL_MOR; DBLAMBDA_IN_DBLAMBDA_MODEL] THEN
  ASM_SIMP_TAC[DBLAMBDAINIT_IN_SUBSTOID_MOR] THEN
  REWRITE_TAC[DBLAMBDAINIT; UNCURRY_DEF]);;

let DBLAMBDAINIT_UNIQUE = prove
 (`!op:(num->A)->A->A app lam r.
      r IN DBLAMBDA_MODEL_MOR ((SUBST,UNCURRY APP,ABS),(op,app,lam))
      ==> r = DBLAMBDAINIT (op,app,lam)`,
  REPEAT GEN_TAC THEN INTRO_TAC "r" THEN
  USE_THEN "r" (MP_TAC o REWRITE_RULE[IN_DBLAMBDA_MODEL_MOR; UNCURRY_DEF]) THEN
  INTRO_TAC "_ model r r_app r_lam" THEN REWRITE_TAC[FUN_EQ_THM] THEN
  HYP_TAC "r -> _ _ r_unit r_bind"
    (REWRITE_RULE[IN_SUBSTOID_MOR; DBLAMBDA_UNIT]) THEN
  DBLAMBDA_INDUCT_TAC THEN ASM_REWRITE_TAC[DBLAMBDAINIT]);;

(* ------------------------------------------------------------------------- *)
(*  Proof that LC is an exponential operad.                                  *)
(* ------------------------------------------------------------------------- *)

let LC_DMOP = prove
 (`!f x. DMOP LC_SUBST LC_SUBST (LC_PROJ o f) (LC_PROJ x) =
         LC_PROJ (DMOP SUBST SUBST f x)`,
  REPEAT GEN_TAC THEN REWRITE_TAC[DMOP; GSYM LC_SUBST_PROJ] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM; o_THM] THEN
  NUM_CASES_TAC THEN
  REWRITE_TAC[SBDERIV; DBLAMBDA_UNIT; LC_UNIT; LC_REF; o_THM] THEN
  REWRITE_TAC[SBREINDEX; GSYM LC_SUBST_PROJ] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN
  REWRITE_TAC[FUN_EQ_THM; o_THM; DBLAMBDA_UNIT; LC_UNIT; LC_REF]);;

let LC_REINDEX_EQ_LC_SUBST = prove
 (`!f x. LC_REINDEX f x = LC_SUBST (LC_REF o f) x`,
  REWRITE_TAC[FORALL_LC_THM; FORALL_LC_FUN_THM] THEN REPEAT GEN_TAC THEN
  REWRITE_TAC[LC_REINDEX; REINDEX_EQ_SUBST; GSYM LC_SUBST_PROJ] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM; o_THM; LC_REF]);;

let LC_ABS_SBMODULE_MOR = prove
 (`LC_ABS IN SBMODULE_MOR LC_SUBST (DMOP LC_SUBST LC_SUBST, LC_SUBST)`,
  REWRITE_TAC[IN_SBMODULE_MOR; SELF_SBMODULE; LC_SUBSTOID] THEN
  SIMP_TAC[SBMODULE_DMOP; LC_SUBSTOID; SELF_SBMODULE] THEN
  REWRITE_TAC[FORALL_LC_THM; FORALL_LC_FUN_THM] THEN REPEAT GEN_TAC THEN
  REWRITE_TAC[LC_SUBST] THEN AP_TERM_TAC THEN REWRITE_TAC[DMOP] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM] THEN
  NUM_CASES_TAC THEN REWRITE_TAC[SBDERIV; LC_DERIV; LC_UNIT; SBREINDEX] THEN
  REWRITE_TAC[o_THM; LC_REINDEX_EQ_LC_SUBST]);;

let LC_APP0_SBMODULE_MOR = prove
 (`SBMODULE_ISOM LC_SUBST (LC_SUBST,DMOP LC_SUBST LC_SUBST) (LC_APP0,LC_ABS)`,
  MESON_TAC[SBMODULE_ISOM_SYM; LC_APP0_ABS; LC_ABS_APP0;
            SBMODULE_ISOM; LC_ABS_SBMODULE_MOR]);;

let LC_EXP = prove
 (`EXP_SUBSTOID LC_SUBST LC_APP0 LC_ABS`,
  REWRITE_TAC[EXP_SUBSTOID; LC_APP0_SBMODULE_MOR]);;

(* ------------------------------------------------------------------------- *)
(*  Proof of the universal property of LC                                    *)
(* ------------------------------------------------------------------------- *)

let EXP_SUBSTOID_UNFOLD = prove
 (`!op h:A->A g.
     EXP_SUBSTOID op h g <=>
     SUBSTOID op /\
     (!x. g (h x) = x) /\
     (!y. h (g y) = y) /\
     (!f x. h (op f x) = op (SBDERIV op f) (h x)) /\
     (!f x. op f (g x) = g (op (SBDERIV op f) x))`,
  REPEAT GEN_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID; SELF_SBMODULE; SBMODULE_ISOM_UNFOLD;
              IN_SBMODULE_MOR; DMOP] THEN
  EQ_TAC THEN STRIP_TAC THEN ASM_REWRITE_TAC[] THEN
  ASM_SIMP_TAC[SBMODULE_DMOP; SELF_SBMODULE]);;

let DBLAMBDA_EXPMAP = new_recursive_definition dblambda_RECURSION
  `(!op h g:A->A i. DBLAMBDA_EXPMAP op h g (REF i) = UNIT op i) /\
   (!op h g x y.
      DBLAMBDA_EXPMAP op h g (APP x y) =
        op (PUSHENV (DBLAMBDA_EXPMAP op h g y) (UNIT op))
           (h (DBLAMBDA_EXPMAP op h g x))) /\
   (!op h g x. DBLAMBDA_EXPMAP op h g (ABS x) =
               g (DBLAMBDA_EXPMAP op h g x))`;;

let DBLAMBDA_EXPMAP_REINDEX = prove
 (`!op h:A->A g x f.
     EXP_SUBSTOID op h g
     ==> DBLAMBDA_EXPMAP op h g (REINDEX f x) =
         op (UNIT op o f) (DBLAMBDA_EXPMAP op h g x)`,
  REWRITE_TAC[RIGHT_FORALL_IMP_THM] THEN REPEAT GEN_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID_UNFOLD] THEN STRIP_TAC THEN DBLAMBDA_INDUCT_TAC THEN
  GEN_TAC THEN ASM_REWRITE_TAC[REINDEX; DBLAMBDA_EXPMAP] THENL
  [ASM_SIMP_TAC[SUBSTOID_RUNIT; o_THM];
   ASM_SIMP_TAC[SUBSTOID_ASSOC] THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM] THEN NUM_CASES_TAC THEN
   ASM_SIMP_TAC[SBDERIV; PUSHENV; o_THM; SUBSTOID_RUNIT; SBREINDEX_UNIT];
   AP_TERM_TAC THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
   REWRITE_TAC[SBDERIV; SLIDE; o_THM] THEN ASM_SIMP_TAC[SBREINDEX_UNIT]]);;

let SBREINDEX_DBLAMBDA_EXPMAP = prove
 (`!op h g x f.
     EXP_SUBSTOID op h g
     ==> SBREINDEX op f (DBLAMBDA_EXPMAP op h g x) =
         DBLAMBDA_EXPMAP op h g (REINDEX f x):A`,
  REWRITE_TAC[RIGHT_FORALL_IMP_THM] THEN REPEAT GEN_TAC THEN
  INTRO_TAC "exp" THEN FIRST_ASSUM MP_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID_UNFOLD] THEN STRIP_TAC THEN DBLAMBDA_INDUCT_TAC THEN
  GEN_TAC THEN ASM_REWRITE_TAC[DBLAMBDA_EXPMAP; REINDEX] THENL
  [ASM_SIMP_TAC[SBREINDEX_UNIT];
   ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SUBSTOID_ASSOC;
                SBREINDEX_DBSUBST] THEN
   AP_THM_TAC THEN AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM; o_THM] THEN
   NUM_CASES_TAC THEN
   ASM_SIMP_TAC[PUSHENV; SBDERIV; SUBSTOID_RUNIT; DBLAMBDA_EXPMAP_REINDEX;
                SBREINDEX_UNIT; o_THM];
   ASM_SIMP_TAC[SBREINDEX; DBLAMBDA_EXPMAP_REINDEX] THEN
   AP_TERM_TAC THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
   REWRITE_TAC[SBDERIV; SLIDE; o_THM] THEN ASM_SIMP_TAC[SBREINDEX_UNIT]]);;

let DBLAMBDA_EXPMAP_SUBST = prove
 (`!op h:A->A g x f.
     EXP_SUBSTOID op h g
     ==> DBLAMBDA_EXPMAP op h g (SUBST f x) =
         op (DBLAMBDA_EXPMAP op h g o f) (DBLAMBDA_EXPMAP op h g x)`,
  REWRITE_TAC[RIGHT_FORALL_IMP_THM] THEN REPEAT GEN_TAC THEN
  INTRO_TAC "exp" THEN FIRST_ASSUM MP_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID_UNFOLD] THEN STRIP_TAC THEN DBLAMBDA_INDUCT_TAC THEN
  GEN_TAC THEN ASM_REWRITE_TAC[SUBST; DBLAMBDA_EXPMAP] THENL
  [ASM_SIMP_TAC[SUBSTOID_RUNIT; o_THM];
   ASM_SIMP_TAC[SUBSTOID_ASSOC] THEN
   AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
   ASM_SIMP_TAC[SUBSTOID_RUNIT; SBDERIV; PUSHENV] THEN
   ASM_SIMP_TAC[DBSUBST_SBREINDEX; o_THM] THEN
   MATCH_MP_TAC SUBSTOID_LUNIT_IMP THEN
   ASM_REWRITE_TAC[o_THM; PUSHENV];
   AP_TERM_TAC THEN AP_THM_TAC THEN AP_TERM_TAC THEN
   REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
   REWRITE_TAC[DERIV; SBDERIV; DBLAMBDA_EXPMAP; o_THM] THEN
   ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SBREINDEX_DBLAMBDA_EXPMAP]]);;

let DBLAMBDA_EXPMAP_REL = prove
 (`!op h:A->A g x y.
     EXP_SUBSTOID op h g /\ x === y
     ==> DBLAMBDA_EXPMAP op h g x = DBLAMBDA_EXPMAP op h g y`,
  INTRO_TAC "!op h g" THEN REWRITE_TAC[IMP_CONJ; RIGHT_FORALL_IMP_THM] THEN
  INTRO_TAC "exp" THEN FIRST_ASSUM MP_TAC THEN
  REWRITE_TAC[EXP_SUBSTOID_UNFOLD] THEN STRIP_TAC THEN
  MATCH_MP_TAC LC_REL_INDUCT THEN CONJ_TAC THENL
  [MATCH_MP_TAC DBLAMBDA_BETA_INDUCT THEN GEN_TAC THEN GEN_TAC THEN
   REWRITE_TAC[DBLAMBDA_EXPMAP; SUBST1_EQ_SUBST] THEN
   ASM_SIMP_TAC[DBLAMBDA_EXPMAP_SUBST] THEN AP_THM_TAC THEN
   AP_TERM_TAC THEN REWRITE_TAC[FUN_EQ_THM; o_THM] THEN
   NUM_CASES_TAC THEN REWRITE_TAC[PUSHENV; DBLAMBDA_EXPMAP];
   ALL_TAC] THEN
  CONJ_TAC THENL
  [MATCH_MP_TAC DBLAMBDA_ETA_INDUCT THEN GEN_TAC THEN
   REWRITE_TAC[DBLAMBDA_EXPMAP] THEN
   ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SUBSTOID_ASSOC] THEN
   ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SUBSTOID_ASSOC] THEN
   SUBGOAL_THEN
     `(op (PUSHENV (UNIT op 0) (UNIT op)) o SBDERIV op (UNIT op o SUC)) =
      UNIT (op:(num->A)->A->A)`
     SUBST1_TAC THENL
   [REWRITE_TAC[FUN_EQ_THM; o_THM] THEN NUM_CASES_TAC THEN
    ASM_SIMP_TAC[SBDERIV; SUBSTOID_RUNIT; PUSHENV] THEN
    ASM_SIMP_TAC[DBSUBST_SBREINDEX; o_THM; SUBSTOID_RUNIT; PUSHENV];
    ASM_SIMP_TAC[SUBSTOID_LUNIT]];
   ALL_TAC] THEN
  REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[DBLAMBDA_EXPMAP]);;

let LC_EXPMAP = define
  `!op h g:A->A x. LC_EXPMAP op h g x = DBLAMBDA_EXPMAP op h g (LC_LIFT x)`;;

let LC_EXPMAP_FACTOR = prove
 (`!op h:A->A g x.
     EXP_SUBSTOID op h g
     ==> LC_EXPMAP op h g (LC_PROJ x) = DBLAMBDA_EXPMAP op h g x`,
  REPEAT GEN_TAC THEN DISCH_TAC THEN REWRITE_TAC[LC_EXPMAP] THEN
  MATCH_MP_TAC DBLAMBDA_EXPMAP_REL THEN ASM_REWRITE_TAC[LC_LIFT_PROJ]);;

g `!op h:A->A g.
      EXP_SUBSTOID op h g
      ==> LC_EXPMAP op h g IN SUBSTOID_MOR (LC_SUBST,op)`;;
e (REPEAT STRIP_TAC);;
e (FIRST_ASSUM (STRIP_ASSUME_TAC o REWRITE_RULE [EXP_SUBSTOID_UNFOLD]));;
e (ASM_REWRITE_TAC[IN_SUBSTOID_MOR; LC_SUBSTOID]);;
e (REWRITE_TAC[LC_UNIT; LC_REF]);;
e (ASM_SIMP_TAC[LC_EXPMAP_FACTOR; DBLAMBDA_EXPMAP]);;
e (REWRITE_TAC[LC_SUBST_DEF]);;
e (ASM_SIMP_TAC[LC_EXPMAP_FACTOR]);;
e (ASM_SIMP_TAC[DBLAMBDA_EXPMAP_SUBST]);;
e (REWRITE_TAC[LC_EXPMAP; o_DEF]);;
let SUBSTOID_MOR_LC_EXPMAP = top_thm ();;

g `!op h:A->A g.
     EXP_SUBSTOID op h g
     ==>
     (!i. DBLAMBDA_EXPMAP op h g (REF i) = UNIT op i) /\
     (!x. DBLAMBDA_EXPMAP op h g (APP0 x) = h (DBLAMBDA_EXPMAP op h g x)) /\
     (!x. DBLAMBDA_EXPMAP op h g (ABS x) = g (DBLAMBDA_EXPMAP op h g x)) /\
     (!t x. DBLAMBDA_EXPMAP op h g (SUBST t x) =
            op (DBLAMBDA_EXPMAP op h g o t) (DBLAMBDA_EXPMAP op h g x))`;;
e (REPEAT GEN_TAC THEN DISCH_TAC);;
e (FIRST_ASSUM (STRIP_ASSUME_TAC o REWRITE_RULE [EXP_SUBSTOID_UNFOLD]));;
e (ASM_REWRITE_TAC[APP0; DBLAMBDA_EXPMAP]);;
e (REPEAT STRIP_TAC);;
e (ASM_SIMP_TAC[DBLAMBDA_EXPMAP_REINDEX; SUBSTOID_ASSOC]);;
e (MATCH_MP_TAC SUBSTOID_LUNIT_IMP);;
e (ASM_REWRITE_TAC[]);;
e (NUM_CASES_TAC THEN REWRITE_TAC[SBDERIV; o_THM] THEN
   ASM_SIMP_TAC[SUBSTOID_RUNIT; SBREINDEX_UNIT; PUSHENV]);;
e (ASM_SIMP_TAC[DBLAMBDA_EXPMAP_SUBST]);;
let DBLAMBDA_EXPMAP_ALT = top_thm ();;

g `!op h:A->A g.
      EXP_SUBSTOID op h g
      ==> EXP_SUBSTOID_MOR LC_SUBST LC_APP0 LC_ABS
                          op h g (LC_EXPMAP op h g)`;;
e (REPEAT STRIP_TAC);;
e (FIRST_ASSUM (STRIP_ASSUME_TAC o REWRITE_RULE [EXP_SUBSTOID_UNFOLD]));;
e (ASM_REWRITE_TAC[EXP_SUBSTOID_MOR; LC_EXP]);;
e (ASM_SIMP_TAC[SUBSTOID_MOR_LC_EXPMAP]);;
e (REWRITE_TAC[FORALL_LC_THM]);;
e (ASM_SIMP_TAC[LC_EXPMAP_FACTOR; LC_APP0]);;
e (ASM_SIMP_TAC[DBLAMBDA_EXPMAP_ALT]);;
let EXP_SUBSTOID_MOR_LC_EXPMAP = top_thm ();;

g `!op1 h1 g1 op2 h2 g2 f:A->B.
      EXP_SUBSTOID_MOR op1 h1 g1 op2 h2 g2 f
      <=> EXP_SUBSTOID op1 h1 g1 /\
          EXP_SUBSTOID op2 h2 g2 /\
          f IN SUBSTOID_MOR (op1,op2) /\
          (!x. h2 (f x) = f (h1 x)) /\
          (!x. g2 (f x) = f (g1 x))`;;
e (REPEAT GEN_TAC THEN REWRITE_TAC[EXP_SUBSTOID_MOR] THEN
   EQ_TAC THENL [ALL_TAC; MESON_TAC[]]);;
e (DISCH_THEN (fun th -> REWRITE_TAC[th] THEN MP_TAC th));;
e (REWRITE_TAC[EXP_SUBSTOID; SBMODULE_ISOM_UNFOLD; IN_SBMODULE_MOR]);;
e (REWRITE_TAC[CONJ_ACI]);;
e (STRIP_TAC THEN GEN_TAC);;
e (SUBGOAL_THEN `!x y : B. h2 x :B = h2 y ==> x = y` MATCH_MP_TAC);;
e (ASM_MESON_TAC[]);;
e (ASM_REWRITE_TAC[]);;
let EXP_SUBSTOID_MOR_FACTS = top_thm ();;

g `!op h:A->A g m.
      EXP_SUBSTOID op h g /\
      EXP_SUBSTOID_MOR LC_SUBST LC_APP0 LC_ABS op h g m
      ==> m = LC_EXPMAP op h g`;;
e (REPEAT STRIP_TAC);;
e (STRIP_ASSUME_TAC
    (REWRITE_RULE [EXP_SUBSTOID_UNFOLD]
                  (ASSUME `EXP_SUBSTOID op (h:A->A) g`)));;
e (STRIP_ASSUME_TAC
     (REWRITE_RULE [EXP_SUBSTOID_MOR_FACTS; LC_EXP]
                   (ASSUME `EXP_SUBSTOID_MOR LC_SUBST LC_APP0 LC_ABS
                                           op (h:A->A) g m`)));;
e (STRIP_ASSUME_TAC
    (REWRITE_RULE [IN_SUBSTOID_MOR; LC_SUBSTOID]
                  (ASSUME `m:lc->A IN SUBSTOID_MOR (LC_SUBST,op)`)));;
e (REWRITE_TAC[FUN_EQ_THM]);;
e (REWRITE_TAC[FORALL_LC_THM]);;
e (ASM_SIMP_TAC[LC_EXPMAP_FACTOR]);;
e (DBLAMBDA_INDUCT_TAC);;
e (ASM_REWRITE_TAC[GSYM LC_REF; GSYM LC_UNIT; DBLAMBDA_EXPMAP]);;
e (ASM_REWRITE_TAC[GSYM LC_APP; LC_APP_APP0; DBLAMBDA_EXPMAP]);;
e (SUBGOAL_THEN `m (LC_APP0 (LC_PROJ a0)) :A = h (DBLAMBDA_EXPMAP op h g a0)`
    SUBST1_TAC);;
e (ASM_MESON_TAC[]);;
e (AP_THM_TAC THEN AP_TERM_TAC);;
e (REWRITE_TAC[FUN_EQ_THM; o_THM]);;
e (NUM_CASES_TAC THEN ASM_REWRITE_TAC[PUSHENV; NOT_SUC; PRE]);;
e (ASM_REWRITE_TAC[GSYM LC_UNIT]);;
e (ASM_REWRITE_TAC[GSYM LC_ABS; DBLAMBDA_EXPMAP]);;
e (ASM_MESON_TAC[]);;
let LC_EXPMAP_UNIQUE = top_thm ();;
